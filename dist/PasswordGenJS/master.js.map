{"version":3,"sources":["src/PasswordGenJS/PasswordGen.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","PasswordGen","this","DEFAULTLENGTH","keyspace","characterSets","l","LOWERCASELETTERS","u","UPPERCASELETTERS","n","NUMBERS","s","SPECIALCHARACTERS","w","WHITESPACE","generateKeyspace","value","needles","haystack","item","min","max","byteArray","Uint8Array","crypto","window","msCrypto","getRandomValues","range","max_range","Math","floor","randomInteger","arguments","undefined","parseInt","MINIMUMLENGTH","sets","DEFAULTSETS","arrayKeySearch","set","split","_set","password","get","generatePassword"],"mappings":"AAAA,YAIA,SAAAA,iBAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAFA,GAAAC,cAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CAAA,GAAAE,GAAAH,EAAAC,EAAAE,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAAC,OAAAC,eAAAT,EAAAI,EAAAM,IAAAN,IAAA,MAAA,UAAAR,EAAAe,EAAAC,GAAA,MAAAD,IAAAZ,EAAAH,EAAAiB,UAAAF,GAAAC,GAAAb,EAAAH,EAAAgB,GAAAhB,MAYAkB,YAAA,WAKA,QAAAA,KACApB,gBAAAqB,KAAAD,GAMAC,KAAAZ,OAAAY,KAAAC,cACAD,KAAAE,SAAA,GACAF,KAAAG,eACAC,EAAAJ,KAAAK,iBACAC,EAAAN,KAAAO,iBACAC,EAAAR,KAAAS,QACAC,EAAAV,KAAAW,kBACAC,EAAAZ,KAAAa,YAMAb,KAAAc,mBA2QA,MAzPA/B,cAAAgB,IACAJ,IAAA,iBAgBAoB,MAAA,SAAAC,EAAAC,GAGA,IAFA,GAAA9B,GAAA,EACAC,EAAA4B,EAAA5B,OACAD,EAAAC,GAAA,CACA,IAAA,GAAA8B,KAAAD,GACA,GAAAD,EAAA7B,IAAA+B,EACA,OAAA,CAGA/B,KAEA,OAAA,KAYAQ,IAAA,gBACAoB,MAAA,SAAAI,EAAAC,GACA,GAAAC,GAAA,GAAAC,YAAA,GACAC,EAAAC,OAAAD,QAAAC,OAAAC,QACAF,GAAAG,gBAAAL,EAEA,IAAAM,GAAAP,EAAAD,EAAA,EACAS,EAAA,GACA,OAAAP,GAAA,IAAAQ,KAAAC,MAAAF,EAAAD,GAAAA,EACA3B,KAAA+B,cAAAZ,EAAAC,GAEAD,EAAAE,EAAA,GAAAM,KAYAhC,IAAA,YACAoB,MAAA,WACA,GAAAA,GAAAiB,UAAA5C,QAAA,GAAA6C,SAAAD,UAAA,GAAA,EAAAA,UAAA,EAKA,OAHAjB,KAAAmB,SAAAnB,IAAAA,GAAAf,KAAAmC,gBACAnC,KAAAZ,OAAA2B,GAEAf,QAYAL,IAAA,cACAoB,MAAA,WACA,GAAAb,GAAA8B,UAAA5C,QAAA,GAAA6C,SAAAD,UAAA,GAAA,GAAAA,UAAA,EAKA,OAHA,gBAAA9B,IAAA,IAAAA,IACAF,KAAAE,SAAAA,GAEAF,QAYAL,IAAA,mBACAoB,MAAA,WACA,GAAAqB,GAAAJ,UAAA5C,QAAA,GAAA6C,SAAAD,UAAA,GAAAhC,KAAAqC,YAAAL,UAAA,EASA,IAPAhC,KAAAE,SAAA,GAOA,gBAAAkC,IAAApC,KAAAsC,eAAAF,EAAApC,KAAAG,eAKA,IAAA,GAAAoC,KAAAH,GAAAI,MAAA,IACAxC,KAAAE,UAAAF,KAAAG,cAAAiC,EAAAG,QAGA,KAAA,GAAAE,KAAAzC,MAAAqC,YAAAG,MAAA,IACAxC,KAAAE,UAAAF,KAAAG,cAAAH,KAAAqC,YAAAI,GAIA,OAAAzC,SAWAL,IAAA,mBACAoB,MAAA,WAEA,IAAA,GADA2B,GAAA,GACAvD,EAAA,EAAAA,EAAAa,KAAAZ,OAAAD,IACAuD,GAAA1C,KAAAE,SAAAsC,MAAA,IAAAxC,KAAA+B,cAAA,EAAA/B,KAAAE,SAAAd,OAAA,GAEA,OAAAsD,MAUA/C,IAAA,gBACAgD,IAAA,WACA,MAAA,MAWAhD,IAAA,gBACAgD,IAAA,WACA,MAAA,OAUAhD,IAAA,cACAgD,IAAA,WACA,MAAA,UAUAhD,IAAA,mBACAgD,IAAA,WACA,MAAA,gCAUAhD,IAAA,mBACAgD,IAAA,WACA,MAAA,gCAUAhD,IAAA,UACAgD,IAAA,WACA,MAAA,gBAUAhD,IAAA,oBACAgD,IAAA,WACA,MAAA,wBAUAhD,IAAA,aACAgD,IAAA,WACA,MAAA,OAGAhD,IAAA,WACAgD,IAAA,WACA,MAAA3C,MAAA4C,uBAIA7C","file":"master.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*==============================================================================\r\n Password generator class\r\n\r\n This is a javascript version of my PasswordGen PHP library accessible here:\r\n https://github.com/lopeax/passwordGen\r\n\r\n This is written in ES2015 so requires a transpiler such as babel to compile\r\n ==============================================================================*/\nvar PasswordGen = function () {\n    /**\r\n     * Create a new PasswordGen instance and setting the default character\r\n     * groups to be used by this class\r\n     */\n    function PasswordGen() {\n        _classCallCheck(this, PasswordGen);\n\n        /*--------------------------------------\r\n         Setup of the length, keyspace and\r\n         characterSets variables\r\n         --------------------------------------*/\n        this.length = this.DEFAULTLENGTH;\n        this.keyspace = '';\n        this.characterSets = {\n            'l': this.LOWERCASELETTERS,\n            'u': this.UPPERCASELETTERS,\n            'n': this.NUMBERS,\n            's': this.SPECIALCHARACTERS,\n            'w': this.WHITESPACE\n        };\n\n        /*--------------------------------------\r\n         Setup the keyspace\r\n         --------------------------------------*/\n        this.generateKeyspace();\n    }\n\n    /*--------------------------------------\r\n     START CONSTANTS\r\n       Define all the class 'constants' in\r\n     this way because ES2015 classes do not\r\n     support class constants\r\n     --------------------------------------*/\n\n    /**\r\n     * Getter for MINIMUMLENGTH class variable for the minimum length of\r\n     * the password generated\r\n     *\r\n     * @return number                           The minimum password length\r\n     */\n\n\n    _createClass(PasswordGen, [{\n        key: 'arrayKeySearch',\n\n        /*--------------------------------------\r\n         END CONSTANTS\r\n         --------------------------------------*/\n\n        /**\r\n         * Test if any elements of an array exist as keys in another array\r\n         *\r\n         * @param  needles          array           The needles to search for in the\r\n         *                                          haystack\r\n         * @param  haystack         array           The haystack for the needles to\r\n         *                                          search\r\n         * @return boolean                          Whether any items of the needles\r\n         *                                          array exist as keys in the haystack\r\n         */\n        value: function arrayKeySearch(needles, haystack) {\n            var i = 0,\n                length = needles.length;\n            while (i < length) {\n                for (var item in haystack) {\n                    if (needles[i] == item) {\n                        return true;\n                    }\n                }\n                i++;\n            }\n            return false;\n        }\n\n        /**\r\n         * Generate a cryptographically strong random number between two values\r\n         *\r\n         * @param  min              number          The minimum number\r\n         * @param  max              number          The maximum number\r\n         * @return integer\r\n         */\n\n    }, {\n        key: 'randomInteger',\n        value: function randomInteger(min, max) {\n            var byteArray = new Uint8Array(1);\n            var crypto = window.crypto || window.msCrypto;\n            crypto.getRandomValues(byteArray);\n\n            var range = max - min + 1;\n            var max_range = 256;\n            if (byteArray[0] >= Math.floor(max_range / range) * range) {\n                return this.randomInteger(min, max);\n            }\n            return min + byteArray[0] % range;\n        }\n\n        /**\r\n         * Set the length of the password, checking if it's an integer and\r\n         * higher than the minimum required length\r\n         *\r\n         * @param  value            integer     Length of the generated password\r\n         * @return PasswordGen      this        The current instance of PasswordGen\r\n         */\n\n    }, {\n        key: 'setLength',\n        value: function setLength() {\n            var value = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n            if (value === parseInt(value) && value >= this.MINIMUMLENGTH) {\n                this.length = value;\n            }\n            return this;\n        }\n\n        /**\r\n         * Set the keyspace of the password generator, checking if it's set and not\r\n         * an empty string\r\n         *\r\n         * @param  keyspace         string      Sets to be used for generator\r\n         * @return PasswordGen      this        The current instance of PasswordGen\r\n         */\n\n    }, {\n        key: 'setKeyspace',\n        value: function setKeyspace() {\n            var keyspace = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n            if (typeof keyspace === 'string' && keyspace != '') {\n                this.keyspace = keyspace;\n            }\n            return this;\n        }\n\n        /**\r\n         * Generate the keyspace of the password generator using the character\r\n         * groups\r\n         *\r\n         * @param  sets             string      Sets to be used for generator\r\n         * @return PasswordGen      this        The current instance of PasswordGen\r\n         */\n\n    }, {\n        key: 'generateKeyspace',\n        value: function generateKeyspace() {\n            var sets = arguments.length <= 0 || arguments[0] === undefined ? this.DEFAULTSETS : arguments[0];\n\n            this.keyspace = '';\n\n            /*--------------------------------------\r\n             Test if the sets variable is a string\r\n             and if any of the characters in it\r\n             are in the characterSets array's keys\r\n             --------------------------------------*/\n            if (typeof sets === 'string' && this.arrayKeySearch(sets, this.characterSets)) {\n                /*--------------------------------------\r\n                 Split the sets string on every\r\n                 character and loop through them\r\n                 --------------------------------------*/\n                for (var set in sets.split('')) {\n                    this.keyspace += this.characterSets[sets[set]];\n                }\n            } else {\n                for (var _set in this.DEFAULTSETS.split('')) {\n                    this.keyspace += this.characterSets[this.DEFAULTSETS[_set]];\n                }\n            }\n\n            return this;\n        }\n\n        /**\r\n         * Generate the password by selecting a random character from\r\n         * the keyspace generated\r\n         *\r\n         * @return string           password    The generated password\r\n         */\n\n    }, {\n        key: 'generatePassword',\n        value: function generatePassword() {\n            var password = '';\n            for (var i = 0; i < this.length; i++) {\n                password += this.keyspace.split('')[this.randomInteger(0, this.keyspace.length - 1)];\n            }\n            return password;\n        }\n\n        /**\r\n         * Getter for password\r\n         *\r\n         * @return string                       The generated password\r\n         */\n\n    }, {\n        key: 'MINIMUMLENGTH',\n        get: function get() {\n            return 8;\n        }\n\n        /**\r\n         * Getter for DEFAULTLENGTH class variable used to generate the default\r\n         * password length\r\n         *\r\n         * @return number                           The default password length\r\n         */\n\n    }, {\n        key: 'DEFAULTLENGTH',\n        get: function get() {\n            return 16;\n        }\n\n        /**\r\n         * Getter for DEFAULTSETS class variable used to generate the keyspace\r\n         *\r\n         * @return string                           The default sets\r\n         */\n\n    }, {\n        key: 'DEFAULTSETS',\n        get: function get() {\n            return 'luns';\n        }\n\n        /**\r\n         * Getter for LOWERCASELETTERS set used in generating the keyspace\r\n         *\r\n         * @return string                           All lower case letters\r\n         */\n\n    }, {\n        key: 'LOWERCASELETTERS',\n        get: function get() {\n            return 'abcdefghijklmnopqrstuvwxyz';\n        }\n\n        /**\r\n         * Getter for UPPERCASELETTERS set used in generating the keyspace\r\n         *\r\n         * @return string                           All upper case letters\r\n         */\n\n    }, {\n        key: 'UPPERCASELETTERS',\n        get: function get() {\n            return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        }\n\n        /**\r\n         * Getter for NUMBERS set used in generating the keyspace\r\n         *\r\n         * @return string                           All single digits\r\n         */\n\n    }, {\n        key: 'NUMBERS',\n        get: function get() {\n            return '1234567890';\n        }\n\n        /**\r\n         * Getter for SPECIALCHARACTERS set used in generating the keyspace\r\n         *\r\n         * @return string                           All special characters used\r\n         */\n\n    }, {\n        key: 'SPECIALCHARACTERS',\n        get: function get() {\n            return '!@#$%&*?,./|[]{}()';\n        }\n\n        /**\r\n         * Getter for WHITESPACE set used in generating the keyspace\r\n         *\r\n         * @return string                           All whitespace characters used\r\n         */\n\n    }, {\n        key: 'WHITESPACE',\n        get: function get() {\n            return ' ';\n        }\n    }, {\n        key: 'password',\n        get: function get() {\n            return this.generatePassword();\n        }\n    }]);\n\n    return PasswordGen;\n}();"],"sourceRoot":"/source/"}