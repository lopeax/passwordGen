{"version":3,"sources":["src/PasswordGenJS/PasswordGen.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","PasswordGen","this","constructor","DEFAULTLENGTH","keyspace","generateKeyspace","value","variable","MAXIMUMRANDOMINTEGER","arguments","undefined","parseInt","MINIMUMLENGTH","console","log","errorTooLong","sets","DEFAULTSETS","arrayKeySearch","CHARACTERSETS","set","split","_set","password","randomInteger","get","generatePassword","needles","haystack","item","min","max","crypto","window","msCrypto","byteArray","Uint8Array","getRandomValues","range","max_range","Math","floor","e","l","LOWERCASELETTERS","u","UPPERCASELETTERS","n","NUMBERS","s","SPECIALCHARACTERS","w","WHITESPACE"],"mappings":"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","file":"master.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*==============================================================================\n Password generator class\n\n This is a javascript version of my PasswordGen PHP library accessible here:\n https://github.com/lopeax/passwordGen\n\n This is written in ES2015 so requires a transpiler such as babel to compile\n\n This does not rely on any outside libraries apart from the window.crypto\n object, and has browser support for at least IE11+\n =============================================================================*/\nvar PasswordGen = function () {\n    /**\n     * Create a new PasswordGen instance and setting the default character\n     * groups to be used by this class\n     */\n    function PasswordGen() {\n        _classCallCheck(this, PasswordGen);\n\n        /*--------------------------------------\n         Setup of the length and keyspace\n         variables\n         --------------------------------------*/\n        this.length = this.constructor.DEFAULTLENGTH;\n        this.keyspace = '';\n\n        /*--------------------------------------\n         Setup the keyspace\n         --------------------------------------*/\n        this.generateKeyspace();\n    }\n\n    /*--------------------------------------\n     START CONSTANTS\n      Define all the class 'constants' in\n     this way because ES2015 classes do not\n     support class constants\n     --------------------------------------*/\n\n    /**\n     * Getter for MINIMUMLENGTH class variable for the minimum length of\n     * the password generated\n     *\n     * @return number                           The minimum password length\n     */\n\n\n    _createClass(PasswordGen, [{\n        key: 'errorTooLarge',\n\n\n        /**\n         * Return an error message if a variable is too large\n         *\n         * @param  variable         string          The variable that's too large\n         * @return string                           The error message\n         */\n        value: function errorTooLarge(variable) {\n            return 'Sorry the ' + variable + ' is too large\\n' + ('The maximum size is ' + this.constructor.MAXIMUMRANDOMINTEGER + '\\n') + ('The default ' + variable + ' is currently being used');\n        }\n\n        /**\n         * Return an error message if a variable is too long\n         *\n         * @param  variable         string          The variable that's too long\n         * @return string                           The error message\n         */\n\n    }, {\n        key: 'errorTooLong',\n        value: function errorTooLong(variable) {\n            return 'Sorry the ' + variable + ' is too long\\n' + ('The maximum length is ' + this.constructor.MAXIMUMRANDOMINTEGER + ' characters\\n') + ('The default ' + variable + ' is currently being used');\n        }\n\n        /**\n         * Set the length of the password, checking if it's an integer and\n         * higher than the minimum required length\n         *\n         * @param  value            integer     Length of the generated password\n         * @return PasswordGen      this        The current instance of PasswordGen\n         */\n\n    }, {\n        key: 'setLength',\n        value: function setLength() {\n            var value = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n            if (value === parseInt(value) && value >= this.constructor.MINIMUMLENGTH) {\n                this.length = value;\n            }\n            return this;\n        }\n\n        /**\n         * Set the keyspace of the password generator, checking if it's set and not\n         * an empty string\n         *\n         * @param  keyspace         string      Sets to be used for generator\n         * @return PasswordGen      this        The current instance of PasswordGen\n         */\n\n    }, {\n        key: 'setKeyspace',\n        value: function setKeyspace() {\n            var keyspace = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n            if (typeof keyspace === 'string' && keyspace != '') {\n                if (keyspace.length < this.constructor.MAXIMUMRANDOMINTEGER) {\n                    this.keyspace = keyspace;\n                } else {\n                    console.log(this.errorTooLong('keyspace'));\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Generate the keyspace of the password generator using the character\n         * groups\n         *\n         * @param  sets             string      Sets to be used for generator\n         * @return PasswordGen      this        The current instance of PasswordGen\n         */\n\n    }, {\n        key: 'generateKeyspace',\n        value: function generateKeyspace() {\n            var sets = arguments.length <= 0 || arguments[0] === undefined ? this.constructor.DEFAULTSETS : arguments[0];\n\n            this.keyspace = '';\n\n            /*--------------------------------------\n             Test if the sets variable is a string\n             and if any of the characters in it\n             are in the CHARACTERSETS array's keys\n             --------------------------------------*/\n            if (typeof sets === 'string' && this.constructor.arrayKeySearch(sets, this.constructor.CHARACTERSETS)) {\n                /*--------------------------------------\n                 Split the sets string on every\n                 character and loop through them\n                 --------------------------------------*/\n                for (var set in sets.split('')) {\n                    this.keyspace += this.constructor.CHARACTERSETS[sets[set]];\n                }\n            } else {\n                for (var _set in this.constructor.DEFAULTSETS.split('')) {\n                    this.keyspace += this.constructor.CHARACTERSETS[this.constructor.DEFAULTSETS[_set]];\n                }\n            }\n\n            if (this.keyspace.length > this.constructor.MAXIMUMRANDOMINTEGER) {\n                console.log(this.errorTooLong('keyspace'));\n                this.generateKeyspace();\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate the password by selecting a random character from\n         * the keyspace generated\n         *\n         * @return string           password    The generated password\n         */\n\n    }, {\n        key: 'generatePassword',\n        value: function generatePassword() {\n            var password = '';\n            for (var i = 0; i < this.length; i++) {\n                password += this.keyspace.split('')[this.constructor.randomInteger(0, this.keyspace.length - 1)];\n            }\n            return password;\n        }\n\n        /**\n         * Getter for password\n         *\n         * @return string                       The generated password\n         */\n\n    }, {\n        key: 'password',\n        get: function get() {\n            return this.generatePassword();\n        }\n    }], [{\n        key: 'arrayKeySearch',\n\n\n        /*--------------------------------------\n         END CONSTANTS\n         --------------------------------------*/\n\n        /**\n         * Test if any elements of an array exist as keys in another array\n         *\n         * @param  needles          array           The needles to search for\n         * @param  haystack         array           The haystack to search\n         * @return boolean                          Whether any needles exist as\n         *                                          array keys in the haystack\n         */\n        value: function arrayKeySearch(needles, haystack) {\n            var i = 0,\n                length = needles.length;\n            while (i < length) {\n                for (var item in haystack) {\n                    if (needles[i] == item) {\n                        return true;\n                    }\n                }\n                i++;\n            }\n            return false;\n        }\n\n        /**\n         * Generate a cryptographically strong random number between two values\n         *\n         * @param  min              number          The minimum number\n         * @param  max              number          The maximum number\n         * @return integer\n         */\n\n    }, {\n        key: 'randomInteger',\n        value: function randomInteger(min, max) {\n            try {\n                if (max < 256) {\n                    var crypto = window.crypto || window.msCrypto;\n                    var byteArray = new Uint8Array(1);\n                    crypto.getRandomValues(byteArray);\n\n                    var range = max - min + 1;\n                    var max_range = 256;\n                    if (byteArray[0] >= Math.floor(max_range / range) * range) {\n                        return this.randomInteger(min, max);\n                    }\n                    return min + byteArray[0] % range;\n                } else {\n                    throw 'Sorry the maximum is too large\\n' + 'The maximum size is 256\\n';\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    }, {\n        key: 'MINIMUMLENGTH',\n        get: function get() {\n            return 8;\n        }\n\n        /**\n         * Getter for MAXIMUMRANDOMINTEGER class variable for the maximum limit of\n         * random integer\n         *\n         * @return number                           The maximum random integer\n         */\n\n    }, {\n        key: 'MAXIMUMRANDOMINTEGER',\n        get: function get() {\n            return 256;\n        }\n\n        /**\n         * Getter for DEFAULTLENGTH class variable used to generate the default\n         * password length\n         *\n         * @return number                           The default password length\n         */\n\n    }, {\n        key: 'DEFAULTLENGTH',\n        get: function get() {\n            return 16;\n        }\n\n        /**\n         * Getter for DEFAULTSETS class variable used to generate the keyspace\n         *\n         * @return string                           The default sets\n         */\n\n    }, {\n        key: 'DEFAULTSETS',\n        get: function get() {\n            return 'luns';\n        }\n\n        /**\n         * Getter for LOWERCASELETTERS set used in generating the keyspace\n         *\n         * @return string                           All lower case letters\n         */\n\n    }, {\n        key: 'LOWERCASELETTERS',\n        get: function get() {\n            return 'abcdefghijklmnopqrstuvwxyz';\n        }\n\n        /**\n         * Getter for UPPERCASELETTERS set used in generating the keyspace\n         *\n         * @return string                           All upper case letters\n         */\n\n    }, {\n        key: 'UPPERCASELETTERS',\n        get: function get() {\n            return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        }\n\n        /**\n         * Getter for NUMBERS set used in generating the keyspace\n         *\n         * @return string                           All single digits\n         */\n\n    }, {\n        key: 'NUMBERS',\n        get: function get() {\n            return '1234567890';\n        }\n\n        /**\n         * Getter for SPECIALCHARACTERS set used in generating the keyspace\n         *\n         * @return string                           All special characters used\n         */\n\n    }, {\n        key: 'SPECIALCHARACTERS',\n        get: function get() {\n            return '!@#$%&*?,./|[]{}()';\n        }\n\n        /**\n         * Getter for WHITESPACE set used in generating the keyspace\n         *\n         * @return string                           All whitespace characters used\n         */\n\n    }, {\n        key: 'WHITESPACE',\n        get: function get() {\n            return ' ';\n        }\n\n        /**\n         * Getter for WHITESPACE set used in generating the keyspace\n         *\n         * @return string                           All whitespace characters used\n         */\n\n    }, {\n        key: 'CHARACTERSETS',\n        get: function get() {\n            return {\n                'l': this.LOWERCASELETTERS,\n                'u': this.UPPERCASELETTERS,\n                'n': this.NUMBERS,\n                's': this.SPECIALCHARACTERS,\n                'w': this.WHITESPACE\n            };\n        }\n    }]);\n\n    return PasswordGen;\n}();"],"sourceRoot":"/source/"}